const jwt = require('jsonwebtoken')

function verifyToken

function verifyToken(req, res, next) {
  // Get auth header value
  const bearerHeader = req.headers["authorization"];
  // Check if bearer is undefined
  if (typeof bearerHeader !== "undefined") {
    // Split at the space
    const bearer = bearerHeader.split(" ");
    // Get token from array
    const bearerToken = bearer[1];
    // Set the token
    req.token = bearerToken;
    // Next middleware
    next();
  } else {
    // Forbidden
    res.sendStatus(403);
  }
}
function ValidToken

function validToken(req, res, next) {
  jwt.verify(req.token, process.env.SECRET, (err, authData) => {
    if (err) {
      res.sendStatus(403);
    } else {
      next();
    }
  });
}
function RolesToken

function rolesToken(role) {
  return function(req, res, next) {
    var decoded = jwt.decode(req.token);
    if (!decoded.permissions.includes(role)) {
      res.json("sem permissao");
    } else {
      next();
    }
  };
}


my route

router.post(
  "/posts",
  verifyToken,
  validToken,
  rolesToken("admin"),
  customerController.posts
);
